<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.stats.lolgg.mapper.LeagueMapper">

    <!-- SELECT -->

    <!-- 이번달 조회 -->
    <sql id="where_month">
        <![CDATA[
        AND GAME_DATE >= DATE_TRUNC('month', CURRENT_TIMESTAMP)
        AND GAME_DATE < DATE_TRUNC('month', CURRENT_TIMESTAMP) + INTERVAL '1 month'
        ]]>
    </sql>

    <sql id="select_month">
        <![CDATA[
        AND EXTRACT(YEAR FROM GAME_DATE) = #{year}
        AND EXTRACT(MONTH FROM GAME_DATE) = #{month}
        ]]>
    </sql>

    <!-- TOP 10  -->
    <!--  <sql id="where_top_ten">
        AND GAME_DATE <![CDATA[ < ]]> CURRENT_TIMESTAMP 
        ORDER BY ABS(EXTRACT(EPOCH FROM CURRENT_TIMESTAMP - GAME_DATE))
        LIMIT 10
    </sql> -->

    <!-- 전체 조회 (조건 없음) -->
    <select id="findAll" resultType="com.stats.lolgg.model.LeagueVO">
        SELECT 
            ID, 
            GAME_ID, 
            RIOT_NAME, 
            CHAMP_NAME, 
            POSITION, 
            KILL, 
            DEATH, 
            ASSIST, 
            GAME_RESULT, 
            GAME_TEAM, 
            GAME_DATE, 
            CREATE_DATE,
            DELETE_YN
        FROM LEAGUE

    </select>

    <!-- 최근 TOP 10 조회 (riot_name) -->
    <select id="findTopTen" parameterType="String" resultType="com.stats.lolgg.model.LeagueVO">
        SELECT 
            GAME_ID
            RIOT_NAME, 
            CHAMP_NAME, 
            POSITION, 
            KILL, 
            DEATH, 
            ASSIST, 
            GAME_RESULT, 
            GAME_TEAM, 
            GAME_DATE
        FROM LEAGUE
        WHERE LOWER(RIOT_NAME) = LOWER(#{riot_name})
        AND DELETE_YN = 'N'
        ORDER BY GAME_DATE DESC
        LIMIT 10

    </select>

    <!-- 전체 전적 조회 (riot_name) -->
    <select id="findRecord" parameterType="String" resultType="com.stats.lolgg.model.LeagueStatsVO">
        SELECT 
            POSITION,
            COUNT(*) AS TOTAL_COUNT,
            COUNT(CASE WHEN GAME_RESULT = '승' THEN 1 END) AS WIN,
            COUNT(CASE WHEN GAME_RESULT = '패' THEN 1 END) AS LOSE,
            ROUND(COUNT(CASE WHEN GAME_RESULT = '승' THEN 1 END)::numeric / COUNT(*) * 100 ,2) AS WIN_RATE
        FROM LEAGUE
        WHERE LOWER(RIOT_NAME) = LOWER(#{riot_name})
        AND DELETE_YN = 'N'
        GROUP BY POSITION
        ORDER BY 
            CASE position
            WHEN 'TOP' THEN 1
            WHEN 'JUG' THEN 2
            WHEN 'MID' THEN 3
            WHEN 'ADC' THEN 4
            WHEN 'SUP' THEN 5
        END
    </select>

    <!-- 최근 한달 전적 조회 (riot_name) -->
    <select id="findRecordMonth" parameterType="String" resultType="com.stats.lolgg.model.LeagueStatsVO">
        SELECT 
            COUNT(*) AS TOTAL_COUNT,
            COUNT(CASE WHEN GAME_RESULT = '승' THEN 1 END) AS WIN,
            COUNT(CASE WHEN GAME_RESULT = '패' THEN 1 END) AS LOSE,
            CASE 
                WHEN COUNT(*) = 0 THEN 0
                ELSE ROUND(COUNT(CASE WHEN GAME_RESULT = '승' THEN 1 END)::NUMERIC / NULLIF(COUNT(*), 0) * 100 ,2)
			END AS WIN_RATE,
            CASE
			WHEN SUM(DEATH) = 0 THEN 9999
			ELSE ROUND((SUM(KILL) + SUM(ASSIST))::NUMERIC / NULLIF(SUM(DEATH), 0), 2) 
            END AS KDA
        FROM LEAGUE
        WHERE LOWER(RIOT_NAME) = LOWER(#{riot_name})
        AND DELETE_YN = 'N'
        <include refid="where_month"></include>
    </select>

    <!-- 모스트 픽 (riot_name) -->
    <select id="findMostPick" parameterType="String" resultType="com.stats.lolgg.model.LeagueStatsVO">
        SELECT 
            CHAMP_NAME,
            COUNT(CHAMP_NAME) AS TOTAL_COUNT,
            COUNT(CASE WHEN GAME_RESULT = '승' THEN 1 END) AS WIN,
            COUNT(CASE WHEN GAME_RESULT = '패' THEN 1 END) AS LOSE,
            ROUND(COUNT(CASE WHEN GAME_RESULT = '승' THEN 1 END)::numeric / COUNT(*) * 100 ,2) AS WIN_RATE
        FROM LEAGUE
        WHERE LOWER(RIOT_NAME) = LOWER(#{riot_name})
        AND DELETE_YN = 'N'
        GROUP BY CHAMP_NAME
        ORDER BY TOTAL_COUNT DESC 
        LIMIT 10

    </select>

    <!-- 장인 -->
    <select id="findChampMaster" parameterType="String" resultType="com.stats.lolgg.model.LeagueStatsVO">
        SELECT 
            RIOT_NAME, 
            COUNT(RIOT_NAME) AS TOTAL_COUNT,
            COUNT(CASE WHEN GAME_RESULT = '승' THEN 1 END) AS WIN,
            COUNT(CASE WHEN GAME_RESULT = '패' THEN 1 END) AS LOSE,
            ROUND(COUNT(CASE WHEN GAME_RESULT = '승' THEN 1 END)::NUMERIC / COUNT(*) * 100 ,2) AS WIN_RATE
        FROM LEAGUE 
        WHERE CHAMP_NAME = #{champ_name}
        AND DELETE_YN = 'N'
        GROUP BY RIOT_NAME 
        HAVING (ROUND(COUNT(CASE WHEN game_result = '승' THEN 1 END)::numeric / COUNT(*)*100,2)) <![CDATA[ >= ]]> 55
        ORDER BY TOTAL_COUNT DESC, WIN_RATE DESC
    </select>

    <!-- !통계 챔피언-->
    <select id="findChampStats" parameterType="int" resultType="com.stats.lolgg.model.LeagueStatsVO">
        SELECT 
            CHAMP_NAME,
            COUNT(CHAMP_NAME) AS TOTAL_COUNT,
            COUNT(CASE WHEN game_result = '승' THEN 1 END) AS win,
            COUNT(CASE WHEN game_result = '패' THEN 1 END) AS lose,
            ROUND(COUNT(CASE WHEN game_result = '승' THEN 1 END)::numeric / COUNT(*)*100,2) AS win_rate
        FROM LEAGUE 
        WHERE DELETE_YN = 'N'
        <include refid="select_month"></include>
        GROUP BY CHAMP_NAME
        HAVING COUNT(CHAMP_NAME) <![CDATA[ >= ]]> 10
    </select>


    <!-- !통계 블루vs레드승률 -->
    <select id="findTeamWinRate" resultType="com.stats.lolgg.model.LeagueStatsVO">
        SELECT 
            GAME_TEAM,
            COUNT(GAME_TEAM) AS TOTAL_COUNT,
            COUNT(CASE WHEN game_result = '승' THEN 1 END) AS win,
            COUNT(CASE WHEN game_result = '패' THEN 1 END) AS lose,
            ROUND(COUNT(CASE WHEN game_result = '승' THEN 1 END)::numeric / COUNT(*)*100,2) AS win_rate
        FROM LEAGUE 
        WHERE DELETE_YN = 'N'
        <include refid="where_month"></include>
        GROUP BY GAME_TEAM
    </select>

    <!-- !통계 게임 -->
    <select id="groupLeagueByRiotName" parameterType="int" resultType="com.stats.lolgg.model.LeagueStatsVO">
        SELECT 
            RIOT_NAME,
            COUNT(RIOT_NAME) AS TOTAL_COUNT,
            COUNT(CASE WHEN game_result = '승' THEN 1 END) AS win,
            COUNT(CASE WHEN game_result = '패' THEN 1 END) AS lose,
            ROUND(COUNT(CASE WHEN game_result = '승' THEN 1 END)::numeric / COUNT(*)*100,2) AS win_rate,
            CASE
			WHEN SUM(DEATH) = 0 THEN 9999
			ELSE ROUND((SUM(KILL) + SUM(ASSIST))::NUMERIC / NULLIF(SUM(DEATH), 0), 2) 
            END AS KDA
        FROM LEAGUE 
        WHERE DELETE_YN = 'N'
        <include refid="select_month"></include>
        GROUP BY RIOT_NAME
        ORDER BY TOTAL_COUNT DESC 
    </select>

    <!-- 최근 30게임에서 같은 팀 시너지 -->
    <select id="findRecordWithTeam" parameterType="String" resultType="com.stats.lolgg.model.LeagueStatsVO">
        SELECT 
            A.RIOT_NAME,
            COUNT(A.RIOT_NAME) AS TOTAL_COUNT,
            COUNT(CASE WHEN B.GAME_RESULT = '승' THEN 1 END) AS WIN,
            COUNT(CASE WHEN B.GAME_RESULT = '패' THEN 1 END) AS LOSE,
            ROUND(COUNT(CASE WHEN B.GAME_RESULT = '승' THEN 1 END)::NUMERIC / COUNT(*)*100,2) AS WIN_RATE
        FROM LEAGUE A 
        INNER JOIN  
        (
            SELECT * FROM LEAGUE 
            WHERE LOWER(RIOT_NAME) = LOWER(#{riot_name})
            ORDER BY GAME_DATE DESC
            LIMIT 30
        ) B
        ON A.GAME_TEAM = B.GAME_TEAM 
        AND A.GAME_ID = B.GAME_ID 
        AND LOWER(A.RIOT_NAME) != LOWER(#{riot_name})
        AND A.DELETE_YN = 'N'
        GROUP BY A.RIOT_NAME
        HAVING  COUNT(A.RIOT_NAME) <![CDATA[ >= ]]> 5
        ORDER BY WIN_RATE DESC
    </select>

    <!-- 나와 인간상성 찾기 -->
    <select id="findRecordOtherTeam" parameterType="String" resultType="com.stats.lolgg.model.LeagueStatsVO">
        SELECT 
            A.RIOT_NAME,
            COUNT(A.RIOT_NAME) AS TOTAL_COUNT,
            COUNT(CASE WHEN B.GAME_RESULT = '승' THEN 1 END) AS WIN,
            COUNT(CASE WHEN B.GAME_RESULT = '패' THEN 1 END) AS LOSE,
            ROUND(COUNT(CASE WHEN B.GAME_RESULT = '승' THEN 1 END)::NUMERIC / COUNT(*)*100,2) AS WIN_RATE
        FROM LEAGUE A 
        INNER JOIN  
        (
            SELECT * FROM LEAGUE 
            WHERE LOWER(RIOT_NAME) = LOWER(#{riot_name})
            ORDER BY GAME_DATE DESC
            LIMIT 30
        ) B
        ON A.GAME_TEAM != B.GAME_TEAM 
        AND A.GAME_ID = B.GAME_ID 
        AND LOWER(A.RIOT_NAME) != LOWER(#{riot_name})
        AND A.DELETE_YN = 'N'
        AND A.POSITION = B.POSITION
        GROUP BY A.RIOT_NAME
        HAVING  COUNT(A.RIOT_NAME) <![CDATA[ >= ]]> 5
        ORDER BY WIN_RATE DESC
    </select>

    <!-- 라인별 승률 조회 -->
    <select id="findRecordLine" parameterType="String" resultType="com.stats.lolgg.model.LeagueStatsVO">
        SELECT 	
            POSITION,
            RIOT_NAME,
            COUNT(RIOT_NAME) AS TOTAL_COUNT,
            COUNT(CASE WHEN GAME_RESULT = '승' THEN 1 END) AS WIN,
            COUNT(CASE WHEN GAME_RESULT = '패' THEN 1 END) AS LOSE,
            ROUND(COUNT(CASE WHEN GAME_RESULT = '승' THEN 1 END)::NUMERIC / COUNT(*)*100,2) AS WIN_RATE,
            CASE
                WHEN SUM(DEATH) = 0 THEN 9999
                ELSE ROUND((SUM(KILL) + SUM(ASSIST))::NUMERIC / NULLIF(SUM(DEATH), 0), 2) 
            END AS KDA
        FROM LEAGUE  
        WHERE POSITION = #{position}
        AND DELETE_YN = 'N'
        GROUP BY POSITION ,RIOT_NAME 
        HAVING COUNT(RIOT_NAME) <![CDATA[ >= ]]>  20
        ORDER BY WIN_RATE DESC
        LIMIT 15    
    </select>

    <!-- 부캐닉네임 조회 -->
    <select id="findMappingName" resultType="java.util.HashMap" >
        SELECT 
            SUB_NAME,
            MAIN_NAME
        FROM
            MAPPING_NAME
        WHERE 
            DELETE_YN = 'N'
    </select>

    <!-- 중복 리플 파일 조회 -->
    <select id="findReplayName" parameterType="String" resultType="Integer">
        SELECT
            COUNT(*)
        FROM
            LEAGUE
        WHERE
            GAME_ID = #{game_id}
            
    </select>
        
    <!-- INSERT  -->

    <!-- 리플 데이터 저장 -->
    <insert id="insertLeague" parameterType="java.util.List">
        INSERT INTO LEAGUE
            (
                game_id,
                riot_name,
                champ_name,
                position,
                kill, 
                death, 
                assist,
                game_result,
                game_team,
                game_date,
                create_date,
                update_date,
                delete_yn,
                create_user,
                gold,
                ccing,
                time_played,
                total_damage_champions,
                total_damage_taken,
                vision_score,
                vision_bought
            )
            VALUES
            <foreach collection="list" item="item" separator=",">
                (
                    #{item.game_id},
                    #{item.riot_name},
                    #{item.champ_name},
                    #{item.position},
                    #{item.kill},
                    #{item.death},
                    #{item.assist},
                    #{item.game_result},
                    #{item.game_team},
                    #{item.game_date},
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP,
                    #{item.delete_yn},
                    #{item.create_user},
                    #{item.gold},
                    #{item.ccing},
                    #{item.time_played},
                    #{item.total_damage_champions},
                    #{item.total_damage_taken},
                    #{item.vision_score},
                    #{item.vision_bought}
                )
            </foreach>
    </insert>

    <!-- 부캐닉 저장 -->
    <insert id="insertMappingName" parameterType="java.util.HashMap">
        INSERT INTO MAPPING_NAME 
            (
                SUB_NAME,
                MAIN_NAME,
                CREATE_DATE,
                UPDATE_DATE,
                DELETE_YN
            )
            VALUES
            (
                #{sub_name},
                #{main_name},
                CURRENT_TIMESTAMP,
                CURRENT_TIMESTAMP,
                'N'
            )
    </insert>
    <!-- UPDATE -->

    <!-- 탈퇴회원처리 -->
    <update id="changeDeleteYN" parameterType="java.util.HashMap">
        UPDATE LEAGUE
            SET DELETE_YN = #{delete_yn},
            UPDATE_DATE = CURRENT_TIMESTAMP
        WHERE 
            RIOT_NAME = #{riot_name}

    </update>

    <!-- 탈퇴한회원처리 mappingName -->
    <update id="changeMappingDeleteYN" parameterType="java.util.HashMap">
        UPDATE MAPPING_NAME
            SET DELETE_YN = #{delete_yn},
            UPDATE_DATE = CURRENT_TIMESTAMP
        WHERE 
            MAIN_NAME = #{riot_name}

    </update>

    <!-- 닉네임 변경 -->
    <update id="changeRiotName" parameterType="java.util.HashMap" >
        UPDATE LEAGUE
            SET RIOT_NAME = #{main_name},
            UPDATE_DATE = CURRENT_TIMESTAMP
        WHERE RIOT_NAME = #{sub_name}
    </update>


</mapper>